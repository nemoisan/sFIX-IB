---
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.16
  slack: circleci/slack@3.4.0
jobs:
  test:
    docker:
      - image: circleci/python:3.7.3
    parameters:
      python-version:
        type: string
    executor: aws-cli/default
    steps:
      - checkout
      - setup_remote_docker
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:  # このステップは依存関係をインストールする<em>前</em>に実行します
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run: echo "export latest_commit_log=$(git log --oneline -1)" >> $BASH_ENV
      - run:
          command: |
            pip install pipenv
            pipenv sync --dev
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
      - run:
          name: run tests
          command: |
            export AWS_REGION_NAME='ap-northeast-1'
            export AWS_ACCESS_KEY_ID='test'
            export AWS_SECRET_ACCESS_KEY='test'
            export run_env=dev
            pipenv run pytest tests lambda --cov=project --cov-report=term-missing --cov-report=html --benchmark-skip
      - store_artifacts:
          path: htmlcov
          destination: htmlcov
      - run:
          name: run linting and metrics
          command: |
            pipenv run flake8 src/ tests/ lambda/
            pipenv run cfn-lint -i W3002 -t cfn/*.yml
  build:
    docker:
      - image: circleci/python:3.7.3
    parameters:
      python-version:
        type: string
    executor: aws-cli/default
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: set aws-cli
          command: |
            mkdir -p ~/.aws
            echo "[default]" >> ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo "[assume_role]" >> ~/.aws/credentials
            echo "source_profile = default" >> ~/.aws/credentials
            echo "role_arn = ${ROLE_ARN}" >> ~/.aws/credentials
      - aws-cli/setup:
          profile-name: assume_role
      - run:
          name: build docket image
          command: |
            echo 'export AWS_PROFILE=assume_role' >> $BASH_ENV
            docker build -t project -f docker/Dockerfile .
            eval $(aws ecr get-login --no-include-email --profile=assume_role)
            docker tag project:latest XXXXXXXXXXXX.dkr.ecr.ap-northeast-1.amazonaws.com/project:latest
            docker push XXXXXXXXXXXX.dkr.ecr.ap-northeast-1.amazonaws.com/project:latest
  deploy_dev:
    docker:
      - image: circleci/python:3.7.3
    parameters:
      python-version:
        type: string
    executor: aws-cli/default
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: deploy to environment
          command: |
            echo 'export AWS_PROFILE=assume_role' >> $BASH_ENV
            ./deploy.sh dev
  deploy_prod:
    docker:
      - image: circleci/python:3.7.3
    parameters:
      python-version:
        type: string
    executor: aws-cli/default
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: deploy to environment
          command: |
            AWS_PROFILE=assume_role ./deploy.sh prod
workflows:
  version: 2
  build_and_push_image:
    jobs:
      - test:
          python-version: "3.6"
          context: dev
      - slack/approval-notification:
          message: ${CIRCLE_BRANCH}をbuildするためにはApproveが必要です。
          requires:
            - test
          context: dev
      - approve_build:
          type: approval
          requires:
            - test
          context: dev
      - build:
          requires:
            - approve_build
          python-version: "3.6"
          context: dev
      - slack/approval-notification:
          message: ${CIRCLE_BRANCH}をdeployするためにはApproveが必要です。
          requires:
            - build
          context: dev
      - approve_deploy:
          type: approval
          requires:
            - build
          context: dev
      - deploy:
          requires:
            - approve_deploy
          python-version: "3.6"
          context: dev